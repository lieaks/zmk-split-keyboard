/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAC 0
#define SYM 1
#define NUM 2

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
	macros {
	e_aigu: e_aigu {
	label = "e_aigu";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(E) &kp E>; 
	};
	e_grave: e_grave {
	label = "e_grave";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(GRAVE) &kp E>;
	};
	e_circ: e_circ {
	label = "e_circ";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(I) &kp E>;
	};
	a_grave: a_grave {
	label = "a_grave";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(GRAVE) &kp A>;
	};
	u_grave: u_grave {
	label = "u_grave";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(GRAVE) &kp U>;
	};
	o_circ: o_circ {
	label = "o_circ";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(I) &kp O>;
	};
	i_circ: i_circ {
	label = "i_circ";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp RA(I) &kp I>;
	};
	warpd_hint: warpd_hint {
	label = "warpd_hint";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp LG(LA(X))>;
	};
	warpd_normal: warp_normal {
	label = "warpd_normal";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&macro_tap &kp LG(LA(C))>;
	};
	sym2macro: behavior_macro_1 {
	label = "macro1";
	compatible = "zmk,behavior-macro";
	#binding-cells = <0>;
	bindings = <&sl SYM>;
	};
     };
     
	combos {
	compatible = "zmk,combos";
	combo_e_aigu {
	timeout-ms = <30>;
	key-positions = <17 18>;
	bindings = <&e_aigu>;
	};
	combo_e_grave {
	timeout-ms = <30>;
	key-positions = <16 17>;
	bindings = <&e_grave>;
	};
	combo_e_circ {
	timeout-ms = <50>;
	key-positions = <16 17 18>;
	bindings = <&e_circ>;
	};
	combo_a_grave {
	timeout-ms = <30>;
	key-positions = <26 27>;
	bindings = <&a_grave>;
	};
	combo_u_grave {
	timeout-ms = <30>;
	key-positions = <6 7>;
	bindings = <&u_grave>;
	};
	combo_o_circ {
	timeout-ms = <50>;
	key-positions = <17 18 19>;
	bindings = <&o_circ>;
	};
	combo_i_circ {
	timeout-ms = <50>;
	key-positions = <10 11 12>;
	bindings = <&i_circ>;
	};
	combo_capslock {
	timeout-ms = <30>;
	key-positions = <2 3>;
	bindings = <&caps_word>;
	};
	combo_warpd_hint {
	timeout-ms = <30>;
	key-positions = <12 13>;
	bindings = <&warpd_hint>;
	};
	combo_warpd_normal {
	timeout-ms = <30>;
	key-positions = <11 12 13>;
	bindings = <&warpd_normal>;
	};
	combo_enter {
	timeout-ms = <30>;
	key-positions = <18 20>;
	bindings = <&kp ENTER>;
	};
	semi {
	timeout-ms = <30>;
	key-positions = <6 16>;
	bindings = <&kp SEMI>;
	};
	lpar {
	timeout-ms = <30>;
	key-positions = <7 17>;
	bindings = <&kp LPAR>;
	};
	rpar {
	timeout-ms = <30>;
	key-positions = <8 18>;
	bindings = <&kp RPAR>;
	};
	combo_tab {
	timeout-ms = <30>;
	key-positions = <10 11>;
	bindings = <&kp TAB>;
	};
	combo_enter_tn {
	timeout-ms = <30>;
	key-positions = <13 16>;
	bindings = <&kp ENTER>;
	};
	combo_esc_re {
	timeout-ms = <30>;
	key-positions = <12 17>;
	bindings = <&kp ESC>;
	};
	combo_copy {
	timeout-ms = <30>;
	key-positions = <12 22>;
	bindings = <&kp LG(C)>;
	};
	combo_paste {
	timeout-ms = <30>;
	key-positions = <13 23>;
	bindings = <&kp LG(V)>;
	};
	combo_cut {
	timeout-ms = <30>;
	key-positions = <11 21>;
	bindings = <&kp LG(X)>;
	};

// 0  1  2  3  4        5  6  7  8  9
// 10 11 12 13 14       15 16 17 18 19
// 20 21 22 23 24       25 26 27 28 29
//          30 31       32 33
    };

	behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
	    
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	gqt: global-quick-tap {
    	    compatible = "zmk,behavior-hold-tap";
   	    label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <160>;
            #global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
	compatible = "zmk,keymap";

       	default_layer {
	bindings = <
 	//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
	//│  Y       │  C       │  L       │  M       │  K       │   │  Z       │  F       │  U       │  , <     │  ' "     │
	   &td LG(C) Y &td LG(C) C &kp L     &kp M      &kp K 	      &td LG(Z) Z      &kp F      &td LG(Z) U      &kp COMMA  &kp SQT
  //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
  //│  I       │  S       │  R       │  T       │  G       │   │  P       │  N       │  E       │  A       │  O       │
	   &gqt LCTRL I &gqt LALT S &gqt LGUI R &gqt LSHIFT T &lt 3 G 	   &td LG(V) P &gqt RSHIFT N &gqt RGUI E &gqt RALT A &gqt RCTRL O
  //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
  //│  Q       │  V       │  W       │  D       │  J       │   │  B       │  H       │  /       │  .       │  X       │
	   &kp Q     &td LG(V) V &lt 3 W    &lt 3 D    &kp J				  &kp B       &kp H      &kp SLASH  &kp DOT    &kp X
  //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                      &lt SYM ESC &kp BKSP      &kp SPC    &lt NUM ENTER
  //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
		>;
		};

       		left_layer {
		bindings = <
 	//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
	//│  `       │  <       │  >       │  !       │  _       │   │  &       │  ;       │  [       │  ]       │  %       │
	   &kp GRAVE  &kp LT     &kp GT     &kp EXCL   &kp UNDER      &kp AMPS   &kp SEMI   &kp LBKT   &kp RBKT   &kp PERCENT
//├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
//│  TAB     │  -       │  +       │  =       │  #       │   │  |       │  :       │  (       │  )       │  ?       │
		&gqt LCTRL TAB  &gqt LALT MINUS  &gqt LGUI LS(EQUAL) &gqt LSHIFT EQUAL &kp HASH 	&kp PIPE  &kp COLON  &kp LPAR &kp RPAR &kp QMARK
  //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
  //│  ^       │  /       │  *       │  \       │          │   │  ~       │  $       │  {       │  }       │  @       │
		&kp CARET    &kp SLASH &kp ASTRK &kp BSLH  &none				 	&kp TILDE &kp DOLLAR &kp LBRC &kp RBRC  &kp AT
					  &lt SYM ESC &kp BKSP 				&kp SPC &lt NUM ENTER
  //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
		>;
		};
		
		right_layer {
		bindings = <
		&none  &kp N7 &kp N8 &kp N9 &none					&kp C_PP &kp C_VOL_DN &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT		
		&gqt LCTRL TAB &gqt LALT N4  &gqt LGUI N5  &gqt LSHIFT N6  &none	&none  &gqt RSHIFT C_BRI_DN  &gqt RGUI C_BRI_UP  &kp RALT &kp RCTRL	
		&none &kp N1 &kp N2 &kp N3  &none					&none &kp LG(C) &kp LG(V) &kp LG(X) &none
					 &kp N0 &kp BKSP 				&kp SPC &lt 2 ENTER
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp F1  &kp F2    &kp F3    &kp F4  &kp F5 				&kp PAGE_UP &kp HOME  &kp UP &kp PSCRN &kp DEL
		&kp F6 &kp F7 &kp F8 &kp F9 &kp F10  					&kp LEFT &kp DOWN  &kp UP &kp RIGHT &none
		&kp F11  &kp F12  &none  &none  &none   				&kp PAGE_DOWN  &kp END  &bt BT_CLR &bt BT_SEL 1 &bt BT_SEL 2   
					 &to 0 &to 0  					&key_repeat &key_repeat 
		>;
		};	
        
	};
};
