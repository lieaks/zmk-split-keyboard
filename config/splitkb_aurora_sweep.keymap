/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "mouse.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MAC 0
#define SYM 1

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&lt {
    tapping_term_ms = <150>;
};

/ {
    macros {
        e_aigu: e_aigu {
            label = "e_aigu";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(E) &kp E>;
        };

        e_grave: e_grave {
            label = "e_grave";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp E>;
        };

        e_circ: e_circ {
            label = "e_circ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(I) &kp E>;
        };

        a_grave: a_grave {
            label = "a_grave";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp A>;
        };

        u_grave: u_grave {
            label = "u_grave";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(GRAVE) &kp U>;
        };

        o_circ: o_circ {
            label = "o_circ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(I) &kp O>;
        };

        i_circ: i_circ {
            label = "i_circ";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp RA(I) &kp I>;
        };

        warpd_hint: warpd_hint {
            label = "warpd_hint";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LG(LA(X))>;
        };

        warpd_normal: warp_normal {
            label = "warpd_normal";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp LG(LA(C))>;
        };

        sym2macro: behavior_macro_1 {
            label = "macro1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sl 1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_e_aigu {
            timeout-ms = <30>;
            key-positions = <17 18>;
            bindings = <&e_aigu>;
            layers = <0>;
        };

        combo_e_grave {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&e_grave>;
            layers = <0>;
        };

        combo_e_circ {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&e_circ>;
            layers = <0>;
        };

        combo_a_grave {
            timeout-ms = <30>;
            key-positions = <26 27>;
            bindings = <&a_grave>;
            layers = <0>;
        };

        combo_u_grave {
            timeout-ms = <30>;
            key-positions = <6 7>;
            bindings = <&u_grave>;
            layers = <0>;
        };

        combo_o_circ {
            timeout-ms = <50>;
            key-positions = <17 18 19>;
            bindings = <&o_circ>;
            layers = <0>;
        };

        combo_i_circ {
            timeout-ms = <50>;
            key-positions = <10 11 12>;
            bindings = <&i_circ>;
            layers = <0>;
        };

        combo_capslock {
            timeout-ms = <30>;
            key-positions = <2 1 3>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        combo_warpd_hint {
            timeout-ms = <30>;
            key-positions = <>;
            bindings = <&warpd_hint>;
        };

        combo_warpd_normal {
            timeout-ms = <30>;
            key-positions = <>;
            bindings = <&warpd_normal>;
        };

        combo_enter {
            timeout-ms = <30>;
            key-positions = <2 3>;
            bindings = <&kp BACKSPACE>;
            layers = <0>;
        };

        semi {
            timeout-ms = <30>;
            key-positions = <6 16>;
            bindings = <&kp SEMI>;
        };

        lpar {
            timeout-ms = <30>;
            key-positions = <7 17>;
            bindings = <&kp LPAR>;
        };

        rpar {
            timeout-ms = <30>;
            key-positions = <8 18>;
            bindings = <&kp RPAR>;
        };

        combo_tab {
            timeout-ms = <30>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
            layers = <0>;
        };

        combo_backspace {
            timeout-ms = <30>;
            key-positions = <12 13>;
            bindings = <&kp BACKSPACE>;
        };

        combo_esc_re {
            timeout-ms = <30>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        combo_copy {
            timeout-ms = <30>;
            key-positions = <22 21>;
            bindings = <&kp LG(C)>;
            layers = <0 6>;
        };

        combo_paste {
            timeout-ms = <30>;
            key-positions = <23 22>;
            bindings = <&kp LG(V)>;
            layers = <0 6>;
        };

        combo_cut {
            timeout-ms = <30>;
            key-positions = <21 23>;
            bindings = <&kp LG(X)>;
            layers = <0 6>;
        };

        french_sym {
            bindings = <&sl 5>;
            key-positions = <6 8>;
            layers = <0>;
        };

        mouse {
            bindings = <&tog 6>;
            key-positions = <>;
            layers = <0>;
        };

        combo_MBLK {
            bindings = <&mkp MB3>;
            key-positions = <30 31>;
            layers = <6>;
        };

        combo_MBCLK2 {
            bindings = <&mkp MB3>;
            key-positions = <>;
            layers = <6>;
        };

        sticky_meh {
            bindings = <&sk LS(LA(LG(LCTRL)))>;
            key-positions = <13 16>;
            layers = <0>;
        };

        // 0  1  2  3  4        5  6  7  8  9
        // 10 11 12 13 14       15 16 17 18 19
        // 20 21 22 23 24       25 26 27 28 29
        //          30 31       32 33
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <190>;
            quick-tap-ms = <160>;
            #global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        td_arrow_layer: td_arrow_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "td_arrow_layer";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp BACKSPACE>, <&kp BACKSPACE>;
        };

        lt_arrow_layer: td_nav_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_arrow_layer";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <225>;
            bindings = <&mo>, <&td_arrow_layer>;
        };

        td_mouse_layer: td_mouse_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "td_mouse_layer";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp SPACE>, <&kp SPACE>;
        };

        lt_mouse_layer: lt_mouse_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "lt_mouse_layer";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <225>;
            bindings = <&mo>, <&td_mouse_layer>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Y  &kp C            &kp L        &kp M          &kp K    &td LG(Z) Z  &kp F          &kp U        &kp COMMA                &kp SQT
&gqt LCTRL I            &gqt LALT S      &gqt LGUI R  &gqt LSHIFT T  &kp G      &kp P        &gqt RSHIFT N  &gqt RGUI E  &gqt RALT A             &gqt RCTRL O
&kp Q  &kp V            &kp W        &lt 3 D        &kp J    &kp B     &lt 6 H           &kp SLASH    &kp DOT                  &kp X
&lt 1 ESC               &lt 3 BACKSPACE                                                                                &lt_mouse_layer 6 SPACE  &lt 2 ENTER
            >;
        };

        SYM {
            bindings = <
&kp GRAVE  &kp LT           &kp GT               &kp EXCL           &none       &kp AMPS   &kp SEMI    &kp LBKT  &kp RBKT   &kp PERCENT
&kp UNDER  &gqt LALT MINUS  &gqt LGUI LS(EQUAL)  &gqt LSHIFT EQUAL  &kp HASH    &kp PIPE   &kp COLON   &kp LPAR  &kp RPAR   &kp QMARK
&kp CARET  &kp SLASH        &kp ASTRK            &kp BSLH           &none       &kp TILDE  &kp DOLLAR  &kp LBRC  &kp RBRC   &kp AT
&lt 1 ESC  &kp BACKSPACE                                                                                         &kp SPACE  &lt 2 ENTER
            >;
        };

        NUM {
            bindings = <
&none          &kp N7         &kp N8        &kp N9          &kp LS(LG(N3))    &kp C_PP      &kp C_VOL_DN          &kp C_VOL_UP        &kp C_PREV  &kp C_NEXT
&gqt LCTRL N0  &gqt LALT N4   &gqt LGUI N5  &gqt LSHIFT N6  &kp LS(LG(N4))    &none         &gqt RSHIFT C_BRI_DN  &gqt RGUI C_BRI_UP  &kp RALT    &gqt RCTRL DEL
&kp GLOBE         &kp N1         &kp N2        &kp N3          &kp LS(LG(N5))    &bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3        &none       &bt BT_CLR

&lt 1 N0       &kp BACKSPACE                                                                                                          &kp SPACE   &lt 2 ENTER
            >;

            label = "right";
        };

        Arrow {
            bindings = <
&kp F1         &kp F2        &kp F3        &kp F4          &kp F5     &kp HOME  &none     &kp UP  &kp PSCRN    &kp PAGE_UP
&gqt LCTRL F6  &gqt LALT F7  &gqt LGUI F8  &gqt LSHIFT F9  &kp F10    &none     &kp LEFT  &kp DOWN  &kp RIGHT    &kp PAGE_DOWN
&kp F11        &kp F12       &none         &none           &none      &kp END   &none     &none   &none        &kp DEL
&to 0          &to 0                                                                              &key_repeat  &key_repeat
            >;
        };

        sym+num {
            bindings = <
&trans       &trans         &kp LS(LA(R))  &trans         &trans    &kp LA(LS(P))      &kp LA(LS(N))      &kp LA(LS(E))      &kp LA(LS(A))      &trans
&kp LG(TAB)  &kp LA(LS(I))  &kp LA(LS(S))  &kp LA(LS(T))  &trans    &kp LC(LA(P))      &kp LC(LA(N))      &kp LC(LA(E))      &kp LC(LA(A))      &trans
&trans       &trans         &trans         &trans         &trans    &kp LC(LA(LS(P)))  &kp LC(LA(LS(N)))  &kp LC(LA(LS(E)))  &kp LC(LA(LS(A)))  &trans
&trans       &trans                                                                                                          &trans             &trans
            >;
        };

        french_symbol {
            bindings = <
&trans  &o_circ  &trans   &u_grave  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &e_circ  &e_aigu  &e_grave  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &i_circ  &trans   &a_grave  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans                                                        &trans  &trans
            >;
        };

        mouse {
            bindings = <
&msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &none    &none  &none           &none     &none            &none 
&msc SCRL_DOWN  &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_RIGHT    &none    &none  &kp LSHIFT &kp LGUI  &kp LALT  &kp LCTRL
&none             &none             &none           &mkp MB3           &none    &none  &none        &none           &none            &none
&mkp MB2          &mkp MB1                                                                                             &mkp MB1         &mkp MB2
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Mouse {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
